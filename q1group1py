#Group 1 Data, where RPM is constant (20 RPM), Different Reductions (10, 15, 20)
import math
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import quad 

 
#Define constants
von_mises_factor = 2/math.sqrt(3)
roll_radius = 32.5 
T = 20
k = -0.5058*T + 210.4
n =-0.0004*T + 0.2185
colors = ['red', 'blue', 'green']


#Resetting global variables
plt.style.use('default')

# Sample data (3 samples)
samples = [
    {'h_naught': 1.654, 'h_after': 1.502, 'width': 24.615, 'reductions': 0.1654, 'label': 'Sample 1'},
    {'h_naught': 1.598, 'h_after': 1.314, 'width': 24.408, 'reductions': 0.2397, 'label': 'Sample 2'},
    {'h_naught': 1.584, 'h_after': 1.280, 'width': 25.057, 'reductions': 0.3168, 'label': 'Sample 3'}
]

#Different friction values
friction_values = [0.05, 0.10, 0.15, 0.20]

#Define functions

def mean_flow_stress(k, n, epsilon_final):
    integral, _ = quad(lambda x: k * x**n, 0, epsilon_final)
    return integral / epsilon_final

def geometry_values(h_naught, h_after, width):
    h_bar = (h_naught + h_after) / 2  
    length = math.sqrt(roll_radius * (h_naught - h_after)) 
    area = width * length
    return length, area, h_bar 

def friction_factor(friction_value, length, h_bar):
    Q = (friction_value * length) / h_bar 
    return 1 / Q * (math.e**(Q) - 1)

def pressure(von_mises_factor, mean_flow_stress, friction_factor):
    return von_mises_factor * mean_flow_stress * friction_factor

def rolling_force(pressure, area):
    return pressure * area

def rolling_torque(rolling_force, length, h_naught, h_after):
    h_bar = (h_naught + h_after) / 2  
    length = math.sqrt(roll_radius * (h_naught - h_after)) 
    return rolling_force * (length/2) 



# Set up a 2x3 grid of subplots (2 rows: Force/Torque, 3 columns: Samples)
fig, axes = plt.subplots(2, 3, figsize=(18, 10))
plt.suptitle('Rolling Force and Torque vs. Friction Coefficient', fontsize=16, y=1.02)


# Flatten axes for easy indexing
axes = axes.flatten()

# Define line styles/markers
force_style = {'marker': 'o', 'linestyle': '-', 'color': 'blue'}
torque_style = {'marker': 's', 'linestyle': '--', 'color': 'red'}


# Main calculation and plotting loop
for i, sample in enumerate(samples):
    # Calculate geometry values for this sample
    length, area, h_bar = geometry_values(sample['h_naught'], sample['h_after'], sample['width'])
    reduction_percent = (sample['reductions'] / sample['h_naught']) * 100
    epsilon_final = math.log(sample['h_naught'] / sample['h_after'])
    mfs = mean_flow_stress(k, n, epsilon_final)

    # Store results for plotting
    ff_values = []
    force_values = []
    torque_values = []

  

        
    for friction in friction_values:
        ff = friction_factor(friction, length, h_bar)
        p = pressure(von_mises_factor, mfs, ff)
        force = rolling_force(p, area)
        torque = rolling_torque(force, length, sample['h_naught'], sample['h_after'])

        #Conversion to get values in Nm instead of Nmm

        ff_values.append(ff)
        force_values.append(force)
        torque_values.append(torque)
        

        # Plotting force vs Friction
        ax_force = axes[i]
        ax_force.plot(ff_values, force_values, **force_style, label=f'Force ({reduction_percent:.1f}% Reduction)')
        ax_force.set_title(f"{sample['label']} (Force)")
        ax_force.set_xlabel('Friction Coefficient')
        ax_force.set_ylabel('Rolling Force (N)')
        ax_force.grid(True)
        ax_force.legend()

        # Plot TORQUE vs. Friction (bottom row)
        ax_torque = axes[i+3]     
        ax_torque.plot(ff_values, torque_values, **torque_style, label=f'Torque ({reduction_percent:.1f}% Reduction)')  
        ax_torque.set_title(f"{sample['label']} (Torque)")
        ax_torque.set_xlabel('Friction Coefficient')
        ax_torque.set_ylabel('Rolling Torque (Nm)')
        ax_torque.grid(True)
        ax_torque.legend()


    print(f"Sample {i+1} - Rolling Forces: {force_values}")
    print(f"Sample {i+1} - Torque: {torque_values}")



# Add legend and show plot

plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()


